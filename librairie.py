class Task :
    def __init__(self, name, writes = None, run = None, reads = None):
        self.name = name
        self.reads = [reads]
        self.writes = [writes]
        self.run = run
    
    #affiche les attributs de la classe Task
    def afficher(self):
        print(self.name)
        print(self.writes)
        print(self.run)
        print(self.reads)
    
    

class TaskSytsem:
    def __init__(self, listeTache, dictionnairePrecedence):
        self.listeTache = listeTache
        self.dictionnairePrecedence = dictionnairePrecedence
    
    #Montrer la liste des taches et les précédences
    def afficher(self):
        print(self.listeTache)
        print(self.dictionnairePrecedence)
    
    #Montrer les dépendences d'une tache
    def getDenpendencies(self, nomTache):
        for key in self.dictionnairePrecedence.keys():
            if (key == nomTache):
                myStr = " ".join(map(str, self.dictionnairePrecedence.get(key)))
                print("Les dépendences de la tache " + nomTache + " sont " + myStr)
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                print("La tache n'existe pas")
                break
    
    #Ajouter une dépendence à une tache
    def ajouterPrecedence(self, nomTache, data):
        for key in self.dictionnairePrecedence.keys():
            if (key == nomTache):
                self.dictionnairePrecedence[key] = data
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                self.dictionnairePrecedence[nomTache] = data
                break
    
    #Ajouter une tache à la liste de tache
    def ajouterTache(self, tache):
        if tache in self.listeTache:
            print("La tache existe déjà")
        else :
            self.listeTache.append(tache)

exemple = {
     "T1": [], 
     "T2": ["T1"], 
     "somme": ["T1", "T2"]
}

def runT1():
    global X
    X = 1

t1 = Task("T1", "X", runT1())
