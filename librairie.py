
from graphics import *

class Task :
    def __init__(self, name, writes = None, run = None, reads = None):
        self.name = name
        self.reads = reads
        self.writes = writes
        self.run = run
    
    #affiche les attributs de la classe Task
    def afficher(self):
        print(self.name)
        print(self.writes)
        print(self.run)
        print(self.reads)

    #permet de dessiner un cercle pour la tache
    def dessiner(self, x, y, radius, fenetre):
        pt = Point(x, y)
        ptText = Point(x, y)
        
        cir = Circle(pt, radius)
        cir.setFill(color_rgb(100, 255, 50))
        cir.draw(fenetre)

        txt = Text(ptText, self.name)
        txt.setTextColor(color_rgb(0, 0, 0))
        txt.setSize(15)
        txt.draw(fenetre)
    
    

class TaskSytsem:
    def __init__(self, listeTache, dictionnairePrecedence):
        self.listeTache = listeTache
        self.dictionnairePrecedence = dictionnairePrecedence
    
    #Montrer la liste des taches et les précédences
    def afficher(self):
        print(self.listeTache)
        print(self.dictionnairePrecedence)
    
    #Montrer les dépendences d'une tache
    def getDenpendencies(self, nomTache):
        for key in self.dictionnairePrecedence.keys():
            myStr = " ".join(map(str, self.dictionnairePrecedence.get(key)))
            if (key == nomTache and myStr == ""):
                print("La tache " + nomTache + " ne possède aucune dépendence")
                break
            elif (key == nomTache and not myStr == ""):
                print("Les dépendences de la tache " + nomTache + " sont " + myStr)
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                print("La tache n'existe pas")
                break
    
    #Ajouter une dépendence à une tache
    def ajouterPrecedence(self, nomTache, data):
        for key in self.dictionnairePrecedence.keys():
            if (key == nomTache):
                self.dictionnairePrecedence[key].append(data)
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                self.dictionnairePrecedence[nomTache] = data
                break
    
    #Ajouter une tache à la liste de tache
    def ajouterTache(self, tache):
        if tache in self.listeTache:
            print("La tache existe déjà")
        else :
            self.listeTache.append(tache)

    def positionKey(self, tache):
        dictToList = list(self.dictionnairePrecedence)
        return dictToList.index(tache)
            

    #verifie si dans la liste de tache si des taches ont le même nom
    def sameName(self):
        for i in range(len(self.listeTache)):
            for j in range(i+1, len(self.listeTache)):
                if (self.listeTache[i].name == self.listeTache[j].name):
                    return True
        return False

    def allDrawing(self):
        win = GraphWin("My Window", 2000, 2000)
        win.setBackground(color_rgb(255, 255, 0))

        x = 0
        y = 0
        for i in range(len(self.listeTache)):
            x += 100
            y = 50
            self.listeTache[i].dessiner(x, y, 25, win)
        win.getMouse()
        win.close()


def addElement(dictionnaire, element):
    dictionnaire[len(dictionnaire)] = element

def getPosition(dico,val):                                   # Retourne la clé de la valeur passé en parametre
    for i in range(len(dico)):
        if dico.get(i)==val:
            return i

#Condition Bernstein
def conditionBernstein(tache1, tache2):
    for i in tache1.writes:
        for j in tache2.reads:
            if i == j:
               print("ne remplis pas les conditions Ecriture " + tache1.name + " et de Lecture " + tache2.name)
               return False
    for k in tache2.writes:
        for l in tache1.reads:
            if k == l:
                print("ne remplis pas les conditions Ecriture " + tache2.name + " et de Lecture " + tache1.name)
                return False
    for a in tache1.writes:
        for b in tache2.writes:
            if a == b:
                print("ne remplis pas les conditions Ecriture " + tache1.name + " et d'Ecriture " + tache2.name)
                return False
    return True

def conditionBernsteinTotal(systemeTache, tache):
    dictIncompatible = {}
    start = systemeTache.positionKey(tache.name)
    for i in range(start,len(systemeTache.dictionnairePrecedence)):
        if conditionBernstein(tache, systemeTache.listeTache[i]) == False and systemeTache.listeTache[i] != tache:
            addElement(dictIncompatible, systemeTache.listeTache[i].name)
    return dictIncompatible

def conditionBernsteinUltime(systemeTache):
    dictIncompatible = {}
    for i in range (len(systemeTache.dictionnairePrecedence)):
        addElement(dictIncompatible, conditionBernsteinTotal(systemeTache, systemeTache.listeTache[i]))
    return dictIncompatible
"""
def killRedondance(systemeTache):
    for i in range(len(systemeTache.dictionnairePrecedence)):
        for j in range(len(systemeTache.dictionnairePrecedence.get(i))):
            for k in range(i+1,len(systemeTache.dictionnairePrecedence)):
                for l in range (len(systemeTache.dictionnairePrecedence.get(k))):
                    if systemeTache.dictionnairePrecedence.get(i)[j]==systemeTache.dictionnairePrecedence.get(k)[l] and (systemeTache.listeTache[k].name) in systemeTache.dictionnairePrecedence.get(i):
                        systemeTache.dictionnairePrecedence.get(i).pop(systemeTache.positionKey(i), systemeTache.dictionnairePrecedence.get(k)[l])
    return systemeTache
"""

def redondances(dico, systemeTache):
    for i in range (len(dico)):
        for j in range(len(dico.get(i))):
            for k in range(i+1,len(dico)):
                for l in range (len(dico.get(k))):
                    if dico.get(i).get(j)==dico.get(k).get(l) and (systemeTache.dictionnairePrecedence.get(k)) in dico.get(i).values():
                        dico.get(i).pop(getPosition(dico.get(i),dico.get(k).get(l)))
    return dico
#verifie si les taches n'ont pas le même nom
def existTache(a,listeTache):
    for i in range(len(listeTache)):
        if (a in listeTache[i].name):
            #print("Ce nom de tache existe deja ")
            return True
    return False 


exemple = {
    "T1": [], 
    "T2": ["T1"], 
    "Tsomme": ["T1", "T2"]
}

exemple2 = {
    "T1" : [],
    "T2" : [],
    "T3" : [],
    "T4" : ["T1", "T2"],
    "T5" : ["T1", "T2"],
    "T6" : ["T3", "T5"],
    "T7" : ["T6"],
    "T8" : ["T4", "T7"]
}

exemple3 = {
    "T1" : [],
    "T2" : [],
    "T3" : ["T1", "T2"],
    "T4" : ["T1", "T2"],
    "T5" : ["T1", "T2"],
    "T6" : ["T4"],
    "T7" : ["T2", "T3", "T4", "T5"],
    "T8" : ["T1", "T3", "T4", "T6"]
}
def runT1():
    global X
    X = 1
    
def runT2():
    global Y
    Y = 2
    
def runT3():
    global X, Y, Z
    Z = Y + X

"""
t1 = Task("T1", ["X"], None, [""])
t2 = Task("T2", ["Y"], None, [""])
t3 = Task("Tsomme", ["Z"], None, ["X","Y"])
"""
"""
t1 = Task("T1", ["G"], None, ["A", "B"])
t2 = Task("T2", ["H"], None, ["C", "D"])
t3 = Task("T3", ["I"], None, ["E","F"])
t4 = Task("T4", ["J"], None, ["G","H"])
t5 = Task("T5", ["K"], None, ["G","H"])
t6 = Task("T6", ["L"], None, ["I","K"])
t7 = Task("T7", ["M"], None, ["L"])
t8 = Task("T8", ["N"], None, ["J","M"])
"""
t1 = Task("T1", ["M3"], None, ["M1", "M2"])
t2 = Task("T2", ["M4"], None, ["M1"])
t3 = Task("T3", ["M1"], None, ["M3","M4"])
t4 = Task("T4", ["M5"], None, ["M3","M4"])
t5 = Task("T5", ["M2"], None, ["M4"])
t6 = Task("T6", ["M5"], None, ["M5"])
t7 = Task("T7", ["M4"], None, ["M1", "M2", "M4"])
t8 = Task("T8", ["M5"], None, ["M1","M3"])

#listeTache1 = [t1, t2, t3]
listeTache = [t1, t2, t3, t4, t5, t6, t7, t8]
conditionBernstein(t1, t3)


