from graphics import *

class Task :
    def __init__(self, name, writes = None, run = None, reads = None):
        self.name = name
        self.reads = reads
        self.writes = writes
        self.run = run
    
    #affiche les attributs de la classe Task
    def afficher(self):
        print(self.name)
        print(self.writes)
        print(self.run)
        print(self.reads)

    def dessiner(self, x, y, radius, fenetre):
        pt = Point(x, y)
        ptText = Point(x, y)
        
        cir = Circle(pt, radius)
        cir.setFill(color_rgb(100, 255, 50))
        cir.draw(fenetre)

        txt = Text(ptText, self.name)
        txt.setTextColor(color_rgb(0, 0, 0))
        txt.setSize(15)
        txt.draw(fenetre)
    
    

class TaskSytsem:
    def __init__(self, listeTache, dictionnairePrecedence):
        self.listeTache = listeTache
        self.dictionnairePrecedence = dictionnairePrecedence
    
    #Montrer la liste des taches et les précédences
    def afficher(self):
        print(self.listeTache)
        print(self.dictionnairePrecedence)
    
    #Montrer les dépendences d'une tache
    def getDenpendencies(self, nomTache):
        for key in self.dictionnairePrecedence.keys():
            if (key == nomTache):
                myStr = " ".join(map(str, self.dictionnairePrecedence.get(key)))
                print("Les dépendences de la tache " + nomTache + " sont " + myStr)
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                print("La tache n'existe pas")
                break
    
    #Ajouter une dépendence à une tache
    def ajouterPrecedence(self, nomTache, data):
        for key in self.dictionnairePrecedence.keys():
            if (key == nomTache):
                self.dictionnairePrecedence[key].append(data)
                break
            elif (nomTache not in self.dictionnairePrecedence.keys()):
                self.dictionnairePrecedence[nomTache] = data
                break
    
    #Ajouter une tache à la liste de tache
    def ajouterTache(self, tache):
        if tache in self.listeTache:
            print("La tache existe déjà")
        else :
            self.listeTache.append(tache)

    def allDrawing(self):
        win = GraphWin("My Window", 800, 800)
        win.setBackground(color_rgb(255, 255, 0))

        x = 0
        y = 0
        for i in range(len(self.listeTache)):
            x += 200
            y += 200
            listeTache[i].dessiner(x, y, 50, win)
        win.getMouse()
        win.close()
    #Condition Bernstein

def conditionBernstein(tache1, tache2):

    for i in tache1.writes:
        for j in tache2.reads:
            if i == j:
               print("ne remplis pas les conditions Ecriture " + tache1.name + " et de Lecture " + tache2.name)
               
    for k in tache2.writes:
        for l in tache1.reads:
            if k == l:
                 print("ne remplis pas les conditions Ecriture " + tache2.name + " et de Lecture " + tache1.name)
    
    for a in tache1.writes:
        for b in tache2.writes:
            if a == b:
                 print("ne remplis pas les conditions Ecriture " + tache1.name + " et d'Ecriture " + tache2.name)
        

exemple = {
     "T1": [], 
     "T2": ["T1"], 
     "somme": ["T1", "T2"]
}

exemple2 = {
    "T1" 
}

def runT1():
    global X
    X = 1
    
    

def runT2():
    global Y
    Y = 2
    
def runT3():
    global X, Y, Z
    Z = Y + X


t1 = Task("T1", ["X"], None, [""])
t2 = Task("T2", ["Y"], None, [""])
t3 = Task("Tsomme", ["Z"], None, ["X","Y"])
"""
t1 = Task("T1", ["G"], None, ["A", "B"])
t2 = Task("T2", ["H"], None, ["C", "D"])
t3 = Task("T3", ["I"], None, ["E","F"])
t4 = Task("T4", ["J"], None, ["G","H"])
t5 = Task("T5", ["K"], None, ["G","H"])
t6 = Task("T6", ["L"], None, ["I","K"])
t7 = Task("T7", ["M"], None, ["L"])
t8 = Task("T8", ["N"], None, ["J","M"])
"""
listeTache = [t1, t2, t3]
#listeTache = [t1, t2, t3, t4, t5, t6, t7, t8]
conditionBernstein(t1, t3)
